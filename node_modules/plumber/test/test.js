describe("plumber", function() {
    var p, plumber, expect, one, number, zero;
    expect = require('expect.js')
    number = require(__dirname + '/../../nmbr/index.js')
    p = plumber = require(__dirname + '/../index.js')
    debugger

    zero = number(0)
    one = number(1)
    two = number(2)
    three = number(3)
    five = number(5)
    seven = number(7)
    alpha = p([0,1])
    square = p([0,0,1])
    cube = p([0,0,0,1])
    it("should exist as a factory function", function() {
        expect(plumber).to.be.a('function')
    })
    it("should require an argument, and use it for creating a polynumber", function() {
        expect(plumber).to.throwException(/missing argument/)
    })
    it("should return a polynumber function", function() {
        expect(square).to.be.an('object')
        expect(cube.typeLvl).to.be.above(2)
    })
    it("should have a list, which size determines it's degree", function() {
        debugger
        expect(square.ixs).to.be.an('array')
        expect(square.degree).to.be.a('number')
        expect(square.degree).to.equal(2)
        expect(cube.degree).to.equal(3)
        expect(square.ixs).to.eql([zero,zero,one])
        expect(cube.ixs).to.eql([zero,zero,zero,one])
    })
    it("basic operations should work", function() {
        expect(p(two).pow(two)).to.equal(p(4))
        expect(p(five).pow(three)).to.equal(p(five.times(five).times(five)))
        expect(p(five).times(five.times(five))).to.equal(p(cube.val(five)))
        expect(p([1,2,3,4,5]).val(1)).to.equal(number(15))
        expect(p([2,2,3,4,5]).val(2)).to.equal(number(130))
        expect(p([4,2,3,4,5]).val(3)).to.equal(number(550))
    })
    it("operations between polynumbers", function() {
        expect(alpha.plus(alpha)).to.equal(p([0,2]))
        expect(square.minus(alpha)).to.equal(p([0,-1,1]))
        expect(square.times(alpha)).to.equal(cube)
        expect(p([2,0,13]).plus(p([1,4]))).to.equal(p([3,4,13]))
        expect(p([2,0,13]).times(p([1,4]))).to.equal(p([2,8,13,52]))
        expect(p([3,-1,0,1]).plus(p([-1,2]))).to.equal(p([2,1,0,1]))
        expect(p([3,-1,0,1]).times(p([-1,2]))).to.equal(p([-3,7,-2,-1,2]))
        debugger
        expect(p([0,1]).pow(2)).to.equal(p([0,0,1]))
    })
})
