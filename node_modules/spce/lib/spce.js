void function(root){

    var spce, __slice = [].slice, expr, newkey, privkeys, variable, variables
        , luma;

    luma = require('luma')

    spce = luma.create({
        init: function () {
            return this
        }
        , add : function(value) {
            return variable(newkey(), value);
        }

        , get : function(key) {
            return variables[key];
        }

        , del : function(key) {
            return variables[key] = void 0;
        }

        , push : function(key, value) {
            var arr;
            arr = variables[key];
            if (!(arr != null)) {
                arr = [];
            }
            arr.push(value);
            return variables[key] = arr;
        }

        , variable : variable

        , variables : variables

    });

    privkeys = [];

    expr = luma.factory({
        init: function() {

            expr.prototype.eq = [];

            expr.prototype.gt = [];

            expr.prototype.lt = [];

            expr.prototype.body = [];

            expr.prototype.func = function() {
                var vars;
                vars = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            };

            function expr(value) {
                this.body = function() {
                    return value;
                };
            }

            return expr;
        }

    });

    newkey = function() {
        var s;
        s = 'var' + privkeys.length;
        privkeys.push(s);
        return s;
    };

    variables = {};

    variable = function(key, value) {
        if (typeof key === 'undefined' || typeof value === 'undefined') {
            return null;
        }
        if (!(variables[key] != null)) {
            variables[key] = value;
        }
        return variables[key];
    };

    // export
    if ( typeof module != 'undefined' && module.exports )
            module.exports = spce
    else
            root.factory = spce
}(this)
