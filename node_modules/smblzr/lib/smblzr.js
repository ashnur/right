"use strict"

void function(root){

    var smblzr;

    function each(obj, iterator, context) {
        if ( obj == null ) return
        if ( obj.forEach === Array.prototype.forEach ) {
            obj.forEach(iterator, context)
        } else if ( obj.length === +obj.length ) {
            for ( var i = 0, l = obj.length; i < l; i++ ) {
                if ( iterator.call(context, obj[i], i, obj) === breaker ) return
            }
        } else {
            for ( var key in obj ) {
                if ( obj.hasOwnProperty(key) ) {
                    if ( iterator.call(context, obj[key], key, obj) === breaker ) return;
                }
            }
        }
    }

    function extend(obj) {
        each(Array.prototype.slice.call(arguments, 1), function(source) {
            for (var prop in source) {
                obj[prop] = source[prop]
            }
        })
        return obj
    }


    smblzr = (function() {
        var ONE, ZERO, ct, defaults, literal
            , rat, self, sybl, sybs, symblzr, tknzr, _, piper;

        self = function() {
            return this;
        };

        tknzr = (require('tknzr')).tokenize;

        rat    = require('rats')
        piper    = require('piper')

        sybl = (function() {

            function sybl(token, lvl) {
                var x;
                if (lvl == null) {
                    lvl = 1;
                }
                this.lvl = lvl;
                this.toString = token.toString
                x = extend(token, this);
                return x;
            }

            return sybl;

        })();

        symblzr = function(token, lvl, slv) {
            var s, type, value;
            s = this[token.toString()];
            if (!(s != null)) {
                s = new sybl(token, lvl);
                value = s != null ? s.toString() : void 0;
                type = s != null ? s.type : void 0;
                if (type === 'var') {
                    s = variable(value);
                    s.lvl = 1;
                } else if (type === 'operator') {
                    s.slv = (slv != null) ? slv : (function() {
                        console.error(this);
                        throw new Error('undefined operator');
                    });
                } else if (type === 'number') {
                    s = rat(value);
                    s.lvl = 1;
                }
                this[token.toString()] = s;
            }
            return s;
        };

        ct = function(str) {
            var t;
            t = tknzr(str);
            if (str.length < 2) {
                return t[0];
            } else {
                return t;
            }
        };

        function smblzr(str) {
            ct(str);
        }

        literal = function(tok) {
            var ctok, r;
            if (typeof tok === 'string') {
                ctok = ct(tok.toString());
            } else {
                ctok = tok;
            }
            r = symblzr.call(sybs, ctok, 1, (function(right) {
                return right;
            }));
            return r;
        };

        defaults = {};

        sybs = {};


        ZERO = literal("0");

        ONE = literal("1");

        symblzr.call(defaults, ct("\n"), 2, (function(l) {
            if (l == null) {
                l = ZERO;
            }
            return literal(l);
        }));

        symblzr.call(defaults, ct("+"), 2, (function(l, r) {
            if (l == null) {
                l = ZERO;
            }
            if (r == null) {
                r = ZERO;
            }
            return literal(l.plus(r));
        }));

        symblzr.call(defaults, ct("-"), 2, (function(l, r) {
            var x;
            if (l == null) {
                l = ZERO;
            }
            if (r == null) {
                r = ZERO;
            }
            x = literal(l.minus(r));
            return x;
        }));

        symblzr.call(defaults, ct("*"), 3, (function(l, r) {
            if (l == null) {
                l = ONE;
            }
            if (r == null) {
                r = ONE;
            }
            return literal(l.times(r));
        }));

        symblzr.call(defaults, ct("/"), 3, (function(l, r) {
            if (l == null) {
                l = ONE;
            }
            if (r == null) {
                r = ONE;
            }
            return literal(l.per(r));
        }));

        symblzr.call(defaults, ct("^"), 4, (function(l, r) {
            if (l == null) {
                l = ONE;
            }
            if (r == null) {
                r = ONE;
            }
            return literal(piper([l]).pow(r.val()));
        }));

        smblzr.symbolize = function(tokens) {
            var token, _i, _len;
            sybs = extend({}, defaults);
            for (_i = 0, _len = tokens.length; _i < _len; _i++) {
                token = tokens[_i];
                symblzr.call(sybs, token);
            }
            return sybs;
        };

        return smblzr;

    })();

    if ( typeof module != 'undefined' && module.exports ) {
        module.exports = smblzr
    } else {
        root.factory = smblzr
    }

}(this)
