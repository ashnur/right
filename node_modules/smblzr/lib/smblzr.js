// Generated by CoffeeScript 1.3.3
"use strict";

var smblzr;

smblzr = (function() {
  var ONE, ZERO, ct, defaults, literal, nl, nmbr, self, sybl, sybs, symblzr, tknzr, _, plumber;

  self = function() {
    return this;
  };

  _ = (require('underscore'))._;

  tknzr = (require('tknzr')).tokenize;

  nmbr  = require(__dirname + '/../../nmbr/index.js')
  plumber  = require(__dirname + '/../../plumber/index.js')

  sybl = (function() {

    function sybl(token, lvl) {
      var x;
      if (lvl == null) {
        lvl = 1;
      }
      this.lvl = lvl;
      this.toString = function() {
        if (this.value != null) {
          return this.value.toString();
        } else if ((this.numerator != null) && (this.denominator != null)) {
          return this.numerator + '/' + this.denominator;
        }
      };
      x = _.extend(token, this);
      return x;
    }

    return sybl;

  })();

  symblzr = function(token, lvl, slv) {
    var s, type, value;
    s = this[token.toString()];
    if (!(s != null)) {
      s = new sybl(token, lvl);
      value = s != null ? s.value : void 0;
      type = s != null ? s.type : void 0;
      if (type === 'var') {
        s = variable(value);
        s.lvl = 1;
      } else if (type === 'operator') {
        s.slv = slv != null ? slv : (function() {
          console.error(this);
          throw new Error('undefined operator');
        });
      } else if (type === 'number') {
        s = nmbr(value);
        s.lvl = 1;
      }
      this[token.toString()] = s;
    }
    return s;
  };

  ct = function(str) {
    var t;
    t = tknzr(str);
    if (str.length < 2) {
      return t[0];
    } else {
      return t;
    }
  };

  function smblzr(str) {
    ct(str);
  }

  literal = function(tok) {
    var ctok, r;
    if (typeof tok === 'string') {
      ctok = ct(tok.toString());
    } else {
      ctok = tok;
    }
    r = symblzr.call(sybs, ctok, 1, (function(right) {
      return right;
    }));
    return r;
  };

  defaults = {};

  sybs = {};

  nl = literal("\n");

  ZERO = literal("0");

  ONE = literal("1");

  symblzr.call(defaults, ct("+"), 2, (function(l, r) {
    if (l == null) {
      l = ZERO;
    }
    if (r == null) {
      r = ZERO;
    }
    return literal(l.plus(r));
  }));

  symblzr.call(defaults, ct("-"), 2, (function(l, r) {
    var x;
    if (l == null) {
      l = ZERO;
    }
    if (r == null) {
      r = ZERO;
    }
    x = literal(l.minus(r));
    return x;
  }));

  symblzr.call(defaults, ct("*"), 3, (function(l, r) {
    if (l == null) {
      l = ONE;
    }
    if (r == null) {
      r = ONE;
    }
    return literal(l.times(r));
  }));

  symblzr.call(defaults, ct("/"), 3, (function(l, r) {
    if (l == null) {
      l = ONE;
    }
    if (r == null) {
      r = ONE;
    }
    return literal(l.per(r));
  }));

  symblzr.call(defaults, ct("^"), 4, (function(l, r) {
    if (l == null) {
      l = ONE;
    }
    if (r == null) {
      r = ONE;
    }
    return literal(plumber(l).pow(r));
  }));

  smblzr.symbolize = function(tokens) {
    var token, _i, _len;
    sybs = _.clone(defaults);
    for (_i = 0, _len = tokens.length; _i < _len; _i++) {
      token = tokens[_i];
      symblzr.call(sybs, token);
    }
    return sybs;
  };

  return smblzr;

})();

module.exports = smblzr;
