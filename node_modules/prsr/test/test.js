// Generated by CoffeeScript 1.3.3
"use strict";

describe("prsr", function() {
  var HALF, NEGONE, NEGTWO, ONE, THIRD, THREE, TWO, ZERO, err, nmbr, prsr, tst;
  prsr = require(__dirname + '/../index.js');
  nmbr = require(__dirname + '/../../nmbr/index.js');
  err = function(str, r) {
    throw new Error('unexpected result from parsing "' + str + '": ' + '(' + typeof r + ')' + r);
  };
  tst = function(str, expect) {
    var r;
    r = prsr(str);
    if (r != null) {
      r = r[0];
    }
    if (expect !== r) {
      return err(str, r);
    }
  };
  ZERO = nmbr(0);
  ONE = nmbr(1);
  THREE = nmbr(3);
  TWO = nmbr(2);
  NEGONE = nmbr(-1);
  NEGTWO = nmbr(-2);
  HALF = ONE.per(TWO);
  THIRD = ONE.per(THREE);
  it("should be a function", function() {
    if (typeof prsr !== 'function') {
      throw new Error('prsr is: ' + typeof prsr);
    } else {
      return true;
    }
  });
  it('should return undefined after parsing empty string', function() {
    tst('', void 0);
    return true;
  });
  it('should return nmbr objects after parsing strings', function() {
    tst('0', ZERO);
    tst('1', ONE);
    tst('+', ZERO);
    tst('-', ZERO);
    tst('*', ONE);
    tst('/', ONE);
    tst('+2', TWO);
    tst('-2', NEGTWO);
    tst('*2', TWO);
    tst('/2', HALF);
    tst('2+3', nmbr(5));
    tst('2-3', NEGONE);
    tst('2*3', nmbr(6));
    tst('2/3', TWO.times(THIRD));
    tst('2++3', nmbr(5));
    tst('2-+3', NEGONE);
    tst('2--3', nmbr(5));
    tst('2+-3', NEGONE);
    tst('1+2+3+4', nmbr(10));
    tst('+2--3+1', nmbr(6));
    tst('1++2--3++4--5', nmbr(15));
    tst('5/3', TWO.minus(THIRD));
    tst('1/3', ONE.per(THREE));
    tst('2-/3', TWO.minus(THIRD));
    tst('2*-3', nmbr(-6));
    tst('2*3+5', nmbr(11));
    tst('2*3-5', ONE);
    return true;
  });
  return it('should return correct answers, following operator precedence', function() {
    debugger;    tst('1-1/3', TWO.per(THREE));
    tst('2+3*5', nmbr(17));
    tst('2-3*5', nmbr(-13));
    tst('2-3*5-7+11*-2+5*7+4*2', ONE);
    tst('-2*4/33-18^3*22/3996', nmbr(-39500).per(nmbr(1221)));
    return true;
  });
});
