"use strict"

describe("prsr", function() {
    var HALF, NEGONE, NEGTWO, ONE, THIRD, THREE, TWO, ZERO
        , err, prsr, test
        , prsr = require(__dirname + '/../index.js')
        , piper = require('polyrats')
        , expect = require('expect.js')
        ;
    function err(str, r){
        throw new Error('unexpected result from parsing "' + str +
            '": ' + '(' + typeof r + ')' + r)
    }

    test = function(str, expect) {
        var r = prsr(str)
            ;
        if (r != null) {
            r = r[0]
        }
//        console.log(r, expect, expect == r)
        return expect != r ? err(str, r) : false
    }
    ZERO = piper([0])
    ONE = piper([1])
    THREE = piper([3])
    TWO = piper([2])
    NEGONE = piper([-1])
    NEGTWO = piper([-2])
    HALF = ONE.per(TWO)
    THIRD = ONE.per(THREE)
    it("should be a function", function() {
        if (typeof prsr !== 'function') {
            throw new Error('prsr is: ' + typeof prsr)
        } else {
            return true
        }
    })
    it('should return undefined after parsing empty string', function() {
        test('', void 0)
    })
    it('should return rat objects after parsing strings', function() {
        test('0', ZERO)
        test('1', ONE)
        test('+', ZERO)
        debugger
        test('-', ZERO)
        test('*', ONE)
        test('/', ONE)
        test("1\n", ONE)
        test("--1", ONE)
        test('+2', TWO)
        test('-2', NEGTWO)
        test('*2', TWO)
        test('/2', HALF)
        test('2+3', piper([5]))
        test('2-3', NEGONE)
        test('2*3', piper([6]))
        test('1/3', THIRD+'')
        test('2/3', TWO.times(THIRD))
        test('2++3', piper([5]))
        test('2-+3', NEGONE)
        test('2--3', piper([5]))
        test('2+-3', NEGONE)
        test('1+2+3+4', piper([10]))
        test('+2--3+1', piper([6]))
        test('1++2--3++4--5', piper([15]))
        test('---1', NEGONE)
        test('0---1', NEGONE)
        test('-----1', NEGONE)
        test('---------------1', NEGONE)
        test('5/3', TWO.minus(THIRD))
        test('1/3', ONE.per(THREE))
        test('2-/3', TWO.minus(THIRD))
        test('2*-3', piper([-6]))
        test('2*3+5', piper([11]))
        test('2*3-5', ONE)
    })
    it('should follow operator precedence', function() {
        test('1-1/3', TWO.per(THREE))
        test('2+3*5', piper([17]))
        test('2-3*5', piper([-13]))
        test('2-3*5-7+11*-2+5*7+4*2', ONE)
        debugger
        test('-2*4/33-18^3*22/3996', piper([-39500]).per(piper([1221])))
    })
    it('should cope with parens', function() {
        test('(1)', ONE)
        test('-(1)', NEGONE)
        test('1+(1)', TWO)
        test('(1)-1', ZERO)
        test('(---1)', NEGONE)
        test('(1-1)/3', ZERO)
        test('(1-2)/3', piper([-1]).per(piper([3])))
        test('(11-2)/3', piper([3]))
        test('(11-1)/(3+2)', piper([2]))
        test('((11-1)/(3+2))', piper([2]))
        test('(-(11-1)/(3+2))', piper([2]).times(NEGONE))
        test('(-1)*(-(11-1)/-(3+2))', piper([2]).times(NEGONE))
        test('-14/3*(5/(7/9))', piper([-30]))
    })
    it('variables should be parsed as polynumbers', function() {
        expect(prsr('2*x')+'').to.eql('[0,2]/[1]')
        expect(prsr('x/11')+'').to.eql('[0,1]/[11]')
        debugger
        expect(prsr('(x^2-2*x+1)/(3*x-3)')+'').to.eql('[-1,1]/[3]')
    })
    it('assign value to variable ', function() {
        test('x=1', TWO)
    })
})
