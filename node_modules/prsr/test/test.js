"use strict"

describe("prsr", function() {
    var HALF, NEGONE, NEGTWO, ONE, THIRD, THREE, TWO, ZERO
        , err, prsr, tst
        , prsr = require(__dirname + '/../index.js')
        , piper = require('piper')
        ;
    function err(str, r){
        throw new Error('unexpected result from parsing "' + str +
            '": ' + '(' + typeof r + ')' + r)
    }

    tst = function(str, expect) {
        var r = prsr(str)
            ;
        if (r != null) {
            r = r[0]
        }
        if (expect !== r) {
            return err(str, r)
        }
    }
    ZERO = piper([0])
    ONE = piper([1])
    THREE = piper([3])
    TWO = piper([2])
    NEGONE = piper([-1])
    NEGTWO = piper([-2])
    HALF = ONE.per(TWO)
    THIRD = ONE.per(THREE)
    it("should be a function", function() {
        if (typeof prsr !== 'function') {
            throw new Error('prsr is: ' + typeof prsr)
        } else {
            return true
        }
    })
    it('should return undefined after parsing empty string', function() {
        tst('', void 0)
    })
    it('should return rat objects after parsing strings', function() {
        tst('0', ZERO)
        tst('1', ONE)
        tst('+', ZERO)
        debugger
        tst('-', ZERO)
        tst('*', ONE)
        tst('/', ONE)
        tst("1\n", ONE)
        tst("--1", ONE)
        tst('+2', TWO)
        tst('-2', NEGTWO)
        tst('*2', TWO)
        tst('/2', HALF)
        tst('2+3', piper([5]))
        tst('2-3', NEGONE)
        tst('2*3', piper([6]))
        tst('2/3', TWO.times(THIRD))
        tst('2++3', piper([5]))
        tst('2-+3', NEGONE)
        tst('2--3', piper([5]))
        tst('2+-3', NEGONE)
        tst('1+2+3+4', piper([10]))
        tst('+2--3+1', piper([6]))
        tst('1++2--3++4--5', piper([15]))
        tst('---1', NEGONE)
        tst('0---1', NEGONE)
        tst('-----1', NEGONE)
        tst('---------------1', NEGONE)
        tst('5/3', TWO.minus(THIRD))
        tst('1/3', ONE.per(THREE))
        tst('2-/3', TWO.minus(THIRD))
        tst('2*-3', piper([-6]))
        tst('2*3+5', piper([11]))
        tst('2*3-5', ONE)
    })
    it('should follow operator precedence', function() {
        tst('1-1/3', TWO.per(THREE))
        tst('2+3*5', piper([17]))
        tst('2-3*5', piper([-13]))
        tst('2-3*5-7+11*-2+5*7+4*2', ONE)
        debugger
        tst('-2*4/33-18^3*22/3996', piper([-39500]).per(piper([1221])))
    })
    it('should cope with parens', function() {
        tst('(1)', ONE)
        tst('-(1)', NEGONE)
        tst('1+(1)', TWO)
        tst('(1)-1', ZERO)
        tst('(---1)', NEGONE)
        tst('(1-1)/3', ZERO)
        tst('(1-2)/3', piper([-1]).per(piper([3])))
        tst('(11-2)/3', piper([3]))
        tst('(11-1)/(3+2)', piper([2]))
        tst('((11-1)/(3+2))', piper([2]))
        tst('(-(11-1)/(3+2))', piper([2]).times(NEGONE))
        tst('(-1)*(-(11-1)/-(3+2))', piper([2]).times(NEGONE))
        tst('-14/3*(5/(7/9))', piper([-30]))
    })
    it('variables should be parsed as polynumbers', function() {
        var expect = require('expect.js')
        expect(prsr('2*x')+'').to.eql('[(1\\1)/1,(3\\1)/1]/[(2\\1)/1]')

    })
})
