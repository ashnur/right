    token = null
    tkns = []
    last = null
    symbols = {}
    result = null

    symbl =
        lvl : 0
        nud : () ->
            throw 'wtf'

        led : () ->
            console.error @
            throw 'missing operator'

    self = () ->
        return @


    variables = {}

    variable = (name) ->
        if typeof name != 'string'
            throw 'string expected'
        if !variables[name]?
            variables[name] =
                equals : []
                overs : []
                lowers : []
                nud : self
                led : self

        return variables[name]

    symblzr = (id, lvl) ->
        s = symbols[id]
        lvl = lvl ? 0
        if s?
            if lvl >= s.lvl then s.lvl = lvl
        else
            s = Object.create symbl
            s.id = s.value = id
            s.lvl = lvl
            symbols[id] = s
        return s


    symblzr "\n"
    symblzr ")"
    symblzr "]"
    symblzr ","

    infix = (id, lvl, meth, led) ->
        s = symblzr id, lvl
        s.led = led ? (left) ->
            @arity = 'binary'
            @left = left
            @right = expr(lvl)
        return s
    #
    #       if !@right?
    #           return  @left
    #       else
    #           return (@left[meth]).call @left, @right

    infix '+', 3, 'plus'
    infix '-', 3, 'minus'
    infix '*', 4, 'times'
    infix '/', 4, 'over'
    infix '^', 5, 'pow'

    #infixr '=', 2
    #infixr '=', 2
    #infixr '<', 2
    #infixr '>', 2
    #infixr '>=', 2
    #infixr '<=', 2

    suit = (t) ->
        value = t?.value
        type = t?.type

        if type == 'var'
            tok= _.extend t, variable value
        else if type == 'operator'
            if !symbols[value]?
                throw 'unknown operation'
            tok= _.extend t, symbols[value]
        else if type == 'number'
            tok= number value
        else
            throw 'dafuq'
        return tok

    next = (id) ->
        if tkns.length < 1
            return null

        last = token
        token = suit tkns.shift()

        if id? && token.id != id
            throw 'expected '+id

        return token

    expr = (lvl=0) ->
        next()
        left = last.nud()
        while lvl > token.lvl
            next()
            left = last.led(left)

        return left

    @parse : (t) ->
        tkns = t
        token = null
        result = []
        while tkns.length
            next()
            result.push expr()

        return result
