"use strict"
void function(root){

    var prsr, c, clear, expr, g, isop, parse, self, smblzr, spce, sybs, t, tkns, tknzr, unry, v, w, x;

    self = function() {
        return this;
    };

    tknzr = (require('tknzr')).tokenize;

    tkns = [];

    smblzr = (require('smblzr')).symbolize;

    sybs = null;

    spce    = require(__dirname + '/../../spce/index.js')

    w = function(i) {
        var key, _ref;
        key = (_ref = tkns[i]) != null ? _ref.toString() : void 0;
        return sybs[key];
    };

    c = function(i) {
        var key;
        key = tkns.splice(i, 1, null)[0];
        return sybs[key];
    };

    x = function(i) {
        var key;
        key = tkns.splice(i, 1)[0];
        return sybs[key];
    };

    g = function(i, o) {
        return tkns.splice(i, 1, o);
    };

    t = function(i) {
        var _ref;
        return (_ref = w(i)) != null ? _ref.type : void 0;
    };

    v = function(i) {
        var _ref, _ref1;
        return (_ref = (_ref1 = w(i)) != null ? _ref1.lvl : void 0) != null ? _ref : -1;
    };

    isop = function(i) {
        return t(i) === 'operator';
    };

    clear = function(e) {
        return e != null;
    };

    unry = function(i) {
        var operator, rhs;
        operator = c(i);
        rhs = !isop(i + 1) ? x(i + 1) : null;
        return g(i, operator.slv(null, rhs));
    };

    expr = function(lvl) {
        var l, nextop, operator, r;
        if (tkns.length === 0) {
            throw new Error('you just fucked it up again. take a walk and then think it through again.');
        }
        if (!isop(0)) {
            l = x(0);
        }
        while (isop(0) && v(0) > lvl) {
            if (isop(1)) {
                unry(1);
                if (!(l != null)) {
                    unry(0);
                    l = x(0);
                }
            }
            if (isop(0)) {
                operator = x(0);
                r = !isop(0) ? w(0) : null;
                nextop = r != null ? 1 : 0;
                if (v(nextop) <= operator.lvl) {
                    if (r != null) {
                        x(0);
                    }
                    l = operator.slv(l, r);
                } else {
                    l = operator.slv(l, expr(operator.lvl));
                }
            }
        }
        return l;
    };

    function parse ( t ) {
        var counter, e;
        tkns = tknzr(t);
        sybs = smblzr(tkns);
        spce.del('input');
        counter = 0;
        while (tkns.length > 0) {
            e = expr(0);
            spce.push('input', e);
            if (++counter > 100) {
                throw new Error('possible infinite loop');
            }
        }
        return spce.get('input');
    };
    // export
    if ( typeof module != 'undefined' && module.exports )
        module.exports = parse
    else
        root.factory = parse
}(this)
