"use strict"
void function(root){

    var smblzr = (require('smblzr')).symbolize
        , spce = require('spce')
        , sybs = null
        , tkns = []
        , tknzr = (require('tknzr')).tokenize
        ;

    function w(i){
        var key =  (tkns[i] != null) ? tkns[i].toString() : void 0
        return sybs[key]
    }

    function c(i){
        var key = tkns.splice(i, 1, null)[0]
            ;
        return sybs[key]
    }

    function x(i){
        var key = tkns.splice(i, 1)[0]
            ;
        return sybs[key]
    }

    function g(i, o){
        return tkns.splice(i, 1, o)
    }

    function t(i){
        var _ref
            ;
        return (_ref = w(i)) != null ? _ref.type : void 0
    }

    function v(i){
        var _ref, _ref1
            ;
        return (_ref = (_ref1 = w(i)) != null ? _ref1.lvl : void 0) != null ? _ref : -1
    }

    function isop(i){
        return t(i) === 'operator'
    }

    function unry(i){
        var operator, rhs
            ;
        operator = c(i)
        rhs = !isop(i + 1) ? x(i + 1) : null
        return g(i, operator.slv(null, rhs))
    }

    function expr(lvl){
        var l, nextop, operator, r
            ;
        if (tkns.length === 0) {
            throw new Error('tkns array should not be empty')
        }
        if (!isop(0)) {
            l = x(0)
        }
        while (isop(0) && v(0) > lvl) {
            if (isop(1)) {
                unry(1)
                if (!(l != null)) {
                    unry(0)
                    l = x(0)
                }
            }
            if (isop(0)) {
                operator = x(0)
                r = !isop(0) ? w(0) : null
                nextop = r != null ? 1 : 0
                if (v(nextop) <= operator.lvl) {
                    if (r != null) {
                        x(0)
                    }
                    l = operator.slv(l, r)
                } else {
                    l = operator.slv(l, expr(operator.lvl))
                }
            }
        }
        return l
    }

    function parse(input){
        var counter, e
            ;
        tkns = tknzr(input)
        sybs = smblzr(tkns)
        spce.del('input')
        counter = 0
        while (tkns.length > 0) {
            e = expr(0)
            spce.push('input', e)
            if (++counter > 100) {
                throw new Error('possible infinite loop')
            }
        }
        return spce.get('input')
    }
    if ( typeof module != 'undefined' && module.exports ) {
        module.exports = parse
    } else {
        root.factory = parse
    }
}(this)
