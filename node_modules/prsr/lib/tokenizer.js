void function(root){
    "use strict"

    function make(type, value, from, to) {

        // Make a token object.

        return {
            type: type
            , value: value
            , from: from
            , to: to
        }
    }

    function tokenizer(source){
        var i = 0
            , j
            , length = source.length
            , token
            , tokens = []
            , typecount = tokenizer.types.length
            , type
            ;

        while ( i < length ) {
            j = 0
            while ( j < typecount ) {
                type = tokenizer.types[j]
                token = type.check(source, i, type, token)
                if ( token ) {
                    if ( ! token.ignore ) {
                        tokens.push(make(type.name, token.value, i, token.to))
                        i = token.to
                    } else {
                        i++
                    }
                    j = 0
                } else {
                    j++
                }

            }

        }

        return tokens
    }

    tokenizer.types = []
    tokenizer.add_type = function(name, check){
        tokenizer.types.push({name: name, check: check})
    }

    if ( module !== undefined && module.exports ) {
        module.exports = tokenizer
    } else {
        root.factory = tokenizer
    }

}(this)
