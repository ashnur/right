void function(root){

    // UTILITIES 

    var slice   = Function.prototype.call.bind([].slice)
      , extend  = function(to){
            var srcs = slice(arguments, 1)
            srcs.forEach(function(src){
                for ( var prop in src ) to[prop] = src[prop]
            })
            return to
        }

   
    // LIBRARY
    var luma = {}
 
    
    // Object.create, replacing PDs with mixins.
    luma.create = function(proto){
        var mixins  = slice(arguments, 1)
          , o       = Object.create(proto)

        return extend.apply(null, [o].concat(mixins))
    }   

    // a wrapper around an object, turning it into
    // an informal constructor function.
    luma.factory = function(proto){
        var f = function(){ 
            var o = Object.create(f.prototype)
            return o.init ? o.init.apply(o, arguments) : o
        }
        f.prototype = proto

        return f
    }

    // standard extend; equivalent to underscore's.
    luma.extend  = extend 
    

    // export
    if ( typeof module != 'undefined' && module.exports )
        module.exports = luma
    else 
        root.factory = luma

}(this)
